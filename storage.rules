// Firebase Storage Security Rules
// Diese Regeln müssen in der Firebase Console unter "Storage" > "Rules" eingetragen werden

rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    
    // === USER PROFILE IMAGES ===
    
    // Profilbilder: Nur der Benutzer kann sein eigenes Bild hochladen/ändern
    match /profile-images/{userId}/{allPaths=**} {
      allow read: if request.auth != null; // Öffentlich lesbar für authentifizierte Benutzer
      allow write: if request.auth != null 
        && request.auth.uid == userId
        && isValidImage()
        && resource.size < 5 * 1024 * 1024; // Max 5MB
    }
    
    // === PROJECT FILES ===
    
    // Projekt-Dateien: Nur für Projektmitglieder
    match /project-files/{projectId}/{fileId} {
      allow read: if request.auth != null 
        && isProjectMember(projectId, request.auth.uid);
      
      allow write: if request.auth != null 
        && isProjectMember(projectId, request.auth.uid)
        && isValidFile()
        && resource.size < 100 * 1024 * 1024; // Max 100MB
        
      allow delete: if request.auth != null 
        && (isProjectOwner(projectId, request.auth.uid) || isFileUploader(fileId, request.auth.uid));
    }
    
    // === MOODBOARD ASSETS ===
    
    // Moodboard-Bilder: Nur für Projektmitglieder
    match /moodboard-assets/{projectId}/{assetId} {
      allow read: if request.auth != null 
        && isProjectMember(projectId, request.auth.uid);
        
      allow write: if request.auth != null 
        && isProjectMember(projectId, request.auth.uid)
        && isValidImage()
        && resource.size < 10 * 1024 * 1024; // Max 10MB
    }
    
    // === SMART LIBRARY FILES ===
    
    // Smart Library Dokumente: Lesbar für alle authentifizierten Benutzer
    match /library-documents/{docId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null 
        && isAdmin(request.auth.uid)
        && isValidDocument()
        && resource.size < 50 * 1024 * 1024; // Max 50MB
    }
    
    // === NEWS IMAGES ===
    
    // News-Bilder: Lesbar für alle, nur Admins können hochladen
    match /news-images/{imageId} {
      allow read: if true; // Öffentlich zugänglich
      allow write: if request.auth != null 
        && isAdmin(request.auth.uid)
        && isValidImage()
        && resource.size < 5 * 1024 * 1024; // Max 5MB
    }
    
    // === TEMPORARY UPLOADS ===
    
    // Temporäre Uploads: Nur für den Uploader, automatische Löschung nach 24h
    match /temp-uploads/{userId}/{uploadId} {
      allow read, write: if request.auth != null 
        && request.auth.uid == userId
        && resource.timeCreated > timestamp.date(2024, 1, 1); // Verhindere alte Dateien
    }
    
    // === HELPER FUNCTIONS ===
    
    // Validiere Bildformate
    function isValidImage() {
      return resource.contentType.matches('image/.*') 
        && resource.contentType in ['image/jpeg', 'image/png', 'image/gif', 'image/webp']
        && !resource.name.matches('.*\\.(exe|bat|sh|php|js)$'); // Keine ausführbaren Dateien
    }
    
    // Validiere Dokumentformate
    function isValidDocument() {
      return resource.contentType in [
        'application/pdf',
        'application/msword',
        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
        'application/vnd.ms-excel',
        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
        'text/plain'
      ] && !resource.name.matches('.*\\.(exe|bat|sh|php|js)$');
    }
    
    // Validiere allgemeine Dateiformate
    function isValidFile() {
      return resource.size > 0 
        && resource.size < 100 * 1024 * 1024 // Max 100MB
        && !resource.name.matches('.*\\.(exe|bat|sh|php|js|html|htm)$') // Keine gefährlichen Dateien
        && !resource.contentType.matches('application/x-.*'); // Keine unbekannten Binärdateien
    }
    
    // Prüfe Projektmitgliedschaft (vereinfacht - in Realität über Firestore)
    function isProjectMember(projectId, userId) {
      return request.auth != null && request.auth.uid == userId;
      // In Produktion: Firestore-Abfrage an /projects/{projectId} für members-Feld
    }
    
    // Prüfe Projektbesitzer
    function isProjectOwner(projectId, userId) {
      return request.auth != null && request.auth.uid == userId;
      // In Produktion: Firestore-Abfrage an /projects/{projectId} für owner-Feld
    }
    
    // Prüfe ob Benutzer die Datei hochgeladen hat
    function isFileUploader(fileId, userId) {
      return request.auth != null && request.auth.uid == userId;
      // In Produktion: Firestore-Abfrage für uploader-Feld
    }
    
    // Prüfe Admin-Status
    function isAdmin(userId) {
      return request.auth != null && request.auth.uid == userId;
      // In Produktion: Firestore-Abfrage an /adminUsers/config für admins-Array
    }
    
    // === SECURITY SCANS ===
    
    // Scanne auf verdächtige Dateinamen
    function hasSuspiciousName(filename) {
      return filename.matches('.*(\\.\\.|/|\\\\|<|>|\\||\\*|\\?|:|"|\'|;|&|\\$|\\{|\\}).*');
    }
    
    // === DEFAULT DENY RULE ===
    
    // Alle anderen Pfade: Zugriff verweigert
    match /{allPaths=**} {
      allow read, write: if false;
    }
  }
}